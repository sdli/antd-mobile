{"version":3,"sources":["../api/index.js"],"names":["protoBuffer","require","path","configs","appInit","reqVerify","process","env","NODE_ENV","trim","init","dev","production","express","app","listen","apiPort","img","cookieParser","jsonParser","sessionOptions","secret","resave","saveUninitialized","cookie","secure","post","req","res","body","verifyResult","console","log","result","verifiedBody","singleRequest","reqType","data","setHeader","json","Result","ErrMsg","msg"],"mappings":"AAAA,IAAIA,cAAcC,QAAQ,gBAAR,CAAlB;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,UAAUF,QAAQ,iBAAR,CAAd;AACA,IAAIG,UAAUH,QAAQ,kBAAR,CAAd,C,CAA2C;AAC3C,IAAII,YAAYJ,QAAQ,oBAAR,CAAhB;;AAEA;AACC,OAAOK,QAAQC,GAAR,CAAYC,QAAnB,KAAgC,WAAhC,IAA+CF,QAAQC,GAAR,CAAYC,QAAZ,CAAqBC,IAArB,MAA+B,KAA/E,GACCT,YAAYU,IAAZ,CAAiBP,QAAQQ,GAAzB,CADD,GAECX,YAAYU,IAAZ,CAAiBP,QAAQS,UAAzB,CAFD;;AAIA;AACA,IAAIC,UAAUZ,QAAQ,SAAR,CAAd;AACA,IAAIa,MAAM,IAAID,OAAJ,EAAV;;AAEA;AACAT,QAAQU,GAAR,EAAY;AACRC,YAAQZ,QAAQa,OADR,EACiB;AACzBC,SAAK,CAFG,EAEC;AACTC,kBAAc,IAHN,EAGY;AACpBC,gBAAY,IAJJ,EAIU;AAClBC,oBAAe;AACXC,gBAAQ,aADG;AAEXC,gBAAQ,IAFG;AAGXC,2BAAmB,KAHR;AAIXC,gBAAQ,EAACC,QAAQ,KAAT,CAAgB;AAAhB,SAJG;AALP,CAAZ;;AAaA;AACAX,IAAIY,IAAJ,CAAS,GAAT,EAAa,UAASC,GAAT,EAAaC,GAAb,EAAiB;AAC1B,QAAIC,OAAOF,IAAIE,IAAf;AACA,QAAIC,eAAezB,UAAUsB,GAAV,EAAcC,GAAd,CAAnB;AACAG,YAAQC,GAAR,CAAYF,YAAZ;AACA,QAAGA,aAAaG,MAAb,IAAuB,CAA1B,EAA4B;AACxBF,gBAAQC,GAAR,CAAYF,aAAaI,YAAzB;AACAlC,oBAAYmC,aAAZ,CACIN,KAAKO,OADT,EAEI,MAFJ,EAGIN,aAAaI,YAHjB,EAII,UAASG,IAAT,EAAc;AACVT,gBAAIU,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAP,oBAAQC,GAAR,CAAYK,IAAZ;AACAT,gBAAIW,IAAJ,CAASF,IAAT;AACH,SARL;AAUH,KAZD,MAYK;AACDT,YAAIU,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAV,YAAIW,IAAJ,CAAS;AACLC,oBAAQ,CAAC,CADJ;AAELC,oBAAQX,aAAaY,GAFhB;AAGLL,kBAAO,OAAOP,aAAaI,YAApB,KAAqC,WAAtC,GAAmDJ,aAAaI,YAAhE,GAA6E;AAH9E,SAAT;AAKH;AACJ,CAxBD","file":"index.js","sourcesContent":["var protoBuffer = require(\"protoBuf-tools\");\r\nvar path = require(\"path\");\r\nvar configs = require(\"./lib/config.js\");\r\nvar appInit = require(\"./lib/appInit.js\"); // app配置\r\nvar reqVerify = require(\"./lib/reqVerify.js\");\r\n\r\n// 根据process加载配置，未设置默认为测试环境\r\n(typeof process.env.NODE_ENV === \"undefined\" || process.env.NODE_ENV.trim() == \"dev\")\r\n?protoBuffer.init(configs.dev)\r\n:protoBuffer.init(configs.production);\r\n\r\n// express库\r\nvar express = require('express');\r\nvar app = new express();\r\n\r\n// 初始化APP\r\nappInit(app,{\r\n    listen: configs.apiPort, // 开启端口监听\r\n    img: 4,  // 开启验证码图片监听\r\n    cookieParser: true, // 开启cookie解析（匹配session）,\r\n    jsonParser: true, // 开启json解析\r\n    sessionOptions:{\r\n        secret: 'sessiontest',\r\n        resave: true,\r\n        saveUninitialized: false,\r\n        cookie: {secure: false} //不设置过期时间\r\n    }\r\n});\r\n\r\n// 接口统一接收地址\r\napp.post('/',function(req,res){\r\n    var body = req.body;\r\n    var verifyResult = reqVerify(req,res);\r\n    console.log(verifyResult);\r\n    if(verifyResult.result == 1){\r\n        console.log(verifyResult.verifiedBody);\r\n        protoBuffer.singleRequest(\r\n            body.reqType,\r\n            \"POST\",\r\n            verifyResult.verifiedBody,\r\n            function(data){\r\n                res.setHeader(\"Content-Type\", \"application/json\");\r\n                console.log(data);\r\n                res.json(data);\r\n            }\r\n        );\r\n    }else{\r\n        res.setHeader(\"Content-Type\", \"application/json\");\r\n        res.json({\r\n            Result: -1,\r\n            ErrMsg: verifyResult.msg,\r\n            data: (typeof verifyResult.verifiedBody !== \"undefined\")?verifyResult.verifiedBody:\"\"\r\n        });\r\n    }\r\n});\r\n"]}